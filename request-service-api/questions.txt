
Question 1
10 Marks
The Virtual Machine Organisation is looking to automate the provisioning of new virtual machines (VMs) for its employees. The infrastructure and tooling are in place for the automated build service, but the request engine and web-based front end are required. A separate team has been assigned to develop the web-based front end, but they have been provided with the interface for them to be able to forward requests to the request engine.

All VMs created by the Virtual Machine Organisation have the following shared attributes:

a uniquely identifying string which is used for the hostname
the name of the requestor of the virtual machine
a number of CPUs
a number of GB of RAM
a size of hard disk in GB
The hostname is of the form:

host<date><build_request_number>
For example, for the 5th build request on the 28th of March 2023 the hostname would be:

host20230328005
This value is generated by the web-based front end. There will never be more than 999 machines built in a single day.

Initially, the Virtual Machine Organisation will provision 2 specific types of VM:

Desktop Machines: Usually with 1 or 2 CPUs, 16 GB RAM and a 160 GB Hard Disk
Server Machines: Usually with 4 or 8 CPS, 64 or 128 GB RAM and a 500 GB Hard Disk
In addition to the shared attributes above, Desktop machines have the following specific attributes:

The Microsoft Windows version (for example, 11)
The build number (for example, 21H2)
In addition to the shared attributes above, Server machines have the following specific attributes:

The Linux distribution name (for example, RedHat)
The major number of the distribution (for example, 9)
The kernel version (for example, 5.14.0-70)
The administrative team who will manage the server (such as the email team or database team)
The web-based front end will have already authenticated the user making the request, passing to the request engine the user's logon name. However, there must additionally be an authorisation request, made by the request engine, based on whether the requestor has the entitlement to request new virtual machines (not everyone has this entitlement!).

For checking a user's entitlements, an interface to the entitlement platform is supplied as follows:

package com.vmorg.auth

public interface AuthorisingService {
    boolean isAuthorised(String user);
}
If the authorisation request is not successful, the request is logged, and no further action is taken.

If the authorisation response is successful, then a provisioning request will be made to the automated build service. The interface to this system is as follows:

package com.vmorg.build 

public interface SystemBuildService
    String createNewMachine(Machine machine) {
}
If a host has been correctly created, the returned String will contain the hostname of the newly created machine.

If a build request fails, the String will be an empty String (but NOT null). This failed request should be noted. There is a requirement for a daily report specifying the count of failed builds. Hostnames used for failed requests are never reused for this report.

Develop the above domain model, including reporting, for use in the following service.

Note that where there are dependencies on the AuthorisingService and/or SystemBuildService in your tests you, should make use of an appropriate Mocking framework to satisfy the dependencies. You should not attempt to implement the interfaces manually.
The following service should be implemented and fully tested. Think carefully about the class hierarchies and data structures you will use, and how you will test your system.


package com.vmorg.buildrequest
/**
 * Interface used to create VM build requests.
 * VMs that are successfully created are tracked 
 * for auditing on a daily basis, as are failed requests.
 * If the build is successful, add the machine 
 * to the collection of machines built today.
 * If the build fails, record the failure for daily report.
 * The API can retrieve the total number of
 * successful build on a per-requestor basis (for cross-charging)
 * and the total number of all failed builds for a given day
 */
public interface VirtualMachineRequestor {

    /**
     * Checks user's entitlements, and if appropriate 
     * creates a new request for a virtual machine build.
     * @param machine to be created, including hostname 
     * and requestor fields
     * @throws UserNotEntitledException thrown 
     * when a user is not entitled to make a request
     * @throws MachineNotCreatedException thrown 
     * when a machine build is not successful
     */
    void createNewRequest(Machine machine) 
              throws UserNotEntitledException, MachineNotCreatedException;

    /**
     * Reports on the number of successful Windows 
     * and Linux machine build requests on a per user basis 
     * for today - for cross charging
     *
     * @return A map of users where the value is a map of 
     * machine types -> quantity created
     */
    Map<String, Map<String, Integer>> totalBuildsByUserForDay();

    /**
     * Reports on the number of failed request builds 
     * for today
     *
     * @return The total number of failed builds for today
     */
    int totalFailedBuildsForDay();
}

Divine(Marker)
